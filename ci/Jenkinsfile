pipeline{
    /*A declarative pipeline*/
    agent {
        /*Agent section*/ 
        // where would you like to run the code 
        label 'master' 
        }
    environment { 
        VERSION = 'Version 1'
    }
    options{
        timestamps()
        }
    parameters {
        string(defaultValue: '/tests/test_tier1.py', name: 'TEST_PATH', description: 'test path')
        choice(name: 'MARKER', choices: ['tier1', 'tier2'], description: 'Choose test suite')
        choice(name: 'VERSION', choices: ['1','2'], description: 'Choose version')
    }
    stages{
        /*stages section*/
        stage ('Deploy Web Server') {
            steps{
                echo "Git clone"
                sh "pwd"
                echo "${VERSION}"
                git branch: 'master',
                    url: 'https://github.com/Oded1990/flask-web.git'
                sh "docker build --tag flask-web ."
                sh "docker run --publish 5000:5000 --name web-container -d flask-web"
            }
        }
        stage ('Test'){
            steps{
                echo "test path:${params.TEST_PATH}"
                echo "test suite:${params.MARKER}"
                echo "vesion:${params.VERSION}"

                echo "Git clone"
                echo "${VERSION}"
                git branch: 'main',
                    url: 'https://github.com/Oded1990/automation-infra.git'
                sh "ls -lat"
                sh "pwd"

                echo "Create venv"
                sh "python3 -m venv venv"
                sh """
                    . venv/bin/activate
                    pip install -r requirements.txt
                    deactivate
                    """

                echo "Run pytest framework"
                sh """
                    . venv/bin/activate
                    pytest --version_web ${params.VERSION} ${params.TEST_PATH}
                    """


            }
        }

        stage ('Teardown'){
            steps{
                sh "docker container stop web-container"
                sh "docker container rm web-container"
                sh "docker image rm flask-web"

            }
        }
    }

    post {
        always {
            junit(
                allowEmptyResults: true,
                testResults: '**/test-reports/*.xml'
            )
        }
    }
}